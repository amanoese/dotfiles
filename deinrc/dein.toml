[[plugins]]
repo = 'Shougo/unite.vim'

#shell
[[plugins]]
repo = 'Shougo/vimshell'
hook_add ='''
" vimshell setting
let g:vimshell_interactive_update_time = 10
let g:vimshell_prompt = $USERNAME."% "
'''
hook_source  = '''
" vimshell map
nnoremap <silent> vp :VimShellPop<CR>
nnoremap <silent> vs :VimShell<CR>
nnoremap <silent> vsc :VimShellCreate<CR>
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'

# quickrun
[[plugins]]
repo = 'thinca/vim-quickrun'

# syntax error hylight
[[plugins]]
repo = 'cohama/vim-hier'

#?
[[plugins]]
repo = 'osyo-manga/shabadou.vim'
depends = ['Shougo/vimproc']

[[plugins]]
repo = 'KazuakiM/vim-qfsigns'

# 非同期でsyntax check
[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
depends = ['Shougo/vimproc','cohama/vim-hier','thinca/vim-quickrun','osyo-manga/shabadou.vim', 'KazuakiM/vim-qfsigns']
hook_add = '''
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config['watchdogs_checker/_'] = {
        \   'runner' : 'vimproc',
        \   'runner/vimproc/sleep' : 10,
        \   'runner/vimproc/updatetime' : 500,
        \   'outputter/buffer/split' : ':botright 4sp',
        \   'outputter/quickfix/open_cmd' : "",
        \   'hook/echo/enable' : 0,
        \   'hook/echo/output_success': '> No Errors Found.',
        \   'hook/back_window/enable' : 1,
        \   'hook/back_window/enable_exit' : 1,
        \   'hock/close_buffer/enable_hock_loaded' : 1,
        \   'hock/close_buffer/enable_success' : 1,
        \   'hook/qfstatusline_update/enable_exit' : 1,
        \   'hook/qfstatusline_update/priority_exit' : 3,
        \ }

if executable('eslint')
  let g:quickrun_config['javascript/watchdogs_checker'] = {
        \   'type' : 'watchdogs_checker/eslint',
        \ }
endif
let g:watchdogs_check_BufWritePost_enables = {
      \ 'javascript'     : 1,
      \ }
'''
on_event = ['FocusLost', 'CursorHold']
hook_post_source  = '''
	call watchdogs#setup(g:quickrun_config)
'''

# ステータスライン
[[plugins]]
repo = 'itchyny/lightline.vim'

# whiteSpace
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'derekwyatt/vim-scala'

#git
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'cohama/agit.vim'

[[plugins]]
repo = 'kmnk/vim-unite-giti.git'

[[plugins]]
repo = 'airblade/vim-rooter'


# 補完
[[plugins]]
repo = 'Shougo/neocomplcache'
hook_add = '''
" neocomplcache setteing
"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplcache#smart_close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplcache_force_omni_patterns')
  let g:neocomplcache_force_omni_patterns = {}
endif
let g:neocomplcache_force_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_force_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplcache_force_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplcache_force_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

'''

[[plugins]]
repo = 'mattn/emmet-vim'

# excelファイル開くために導入
[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'mattn/startmenu-vim'
#[[plugins]]
#repo = 'vim-scripts/taglist.vim'
#
#[[plugins]]
#repo = 'majutsushi/tagbar'
#hook_add ='''
#nmap <kPlus> <C-a>
#nmap <kMinus> <C-x>
#'''
#hook_post_source  = '''
#nmap <F8> :TagbarToggle<CR>
#'''

# インデント
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add ='''
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_guide_size=1
'''

# brawser
[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
let g:netrw_nogx=1
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
'''

# color scheme
[[plugins]]
repo = 'tomasr/molokai'
hook_add = '''
" Colorscheme イベントの発生が抑制されないよう nented を付ける。
set background=dark
au MyAutoCmd VimEnter * nested colorscheme molokai

'''
