[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'
depends = ['Shougo/unite.vim']
hook_add ='''
"http://blog.ruedap.com/2011/01/10/vim-unite-plugin
" 入力モードで開始する
let g:unite_enable_start_insert=1
" バッファ一覧
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
" ファイル一覧
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
" レジスタ一覧
nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
" 最近使用したファイル一覧
nnoremap <silent> ,um :<C-u>Unite file_mru<CR>
" 常用セット
nnoremap <silent> ,uu :<C-u>Unite buffer file_mru<CR>
" 全部乗せ
nnoremap <silent> ,ua :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
" ウィンドウを分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
" ウィンドウを縦に分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
au FileType unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
" ESCキーを2回押すと終了する
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> q
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>q
'''

#shell
[[plugins]]
repo = 'Shougo/vimshell'
hook_add ='''
" vimshell setting
let g:vimshell_interactive_update_time = 10
let g:vimshell_prompt = $USERNAME."% "
'''
hook_source  = '''
" vimshell map
nnoremap <silent> vp :VimShellPop<CR>
nnoremap <silent> vs :VimShell<CR>
nnoremap <silent> vsc :VimShellCreate<CR>
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

# quickrun
[[plugins]]
repo = 'thinca/vim-quickrun'

# syntax error hylight
[[plugins]]
repo = 'cohama/vim-hier'

# syntax error under cursor
[[plugins]]
repo = 'dannyob/quickfixstatus'

#?
[[plugins]]
repo = 'osyo-manga/shabadou.vim'
depends = ['Shougo/vimproc']

[[plugins]]
repo = 'KazuakiM/vim-qfsigns'

# ステータスライン
[[plugins]]
repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'renyard/vim-git-flow-format'
depends = ['itchyny/lightline.vim']

# ステータスライン error
[[plugins]]
repo = 'KazuakiM/vim-qfstatusline'
depends = ['itchyny/lightline.vim']
hook_add = '''
" :WatchdogsRun後にlightline.vimを更新
let g:Qfstatusline#UpdateCmd = function('lightline#update')
let g:lightline = {
    \ 'active': {
    \   'right': [ [ 'lineinfo' ],
    \              [ 'percent' ],
    \              [ 'syntaxcheck' ],
    \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
    \ },
    \ 'component_expand': {
    \   'syntaxcheck': 'qfstatusline#Update'
    \ },
    \ 'component_type': {
    \   'syntaxcheck': 'error',
    \ },
    \ }
'''
hook_post_source = '''
" fugit setting
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
'''

# 非同期でsyntax check
[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
depends = ['Shougo/vimproc','cohama/vim-hier','thinca/vim-quickrun','osyo-manga/shabadou.vim', 'KazuakiM/vim-qfsigns']
hook_add = '''
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config['watchdogs_checker/_'] = {
        \   'runner' : 'vimproc',
        \   'runner/vimproc/sleep' : 10,
        \   'runner/vimproc/updatetime' : 500,
        \   'outputter/buffer/split' : ':botright 4sp',
        \   'outputter/quickfix/open_cmd' : "",
        \   'hook/echo/enable' : 0,
        \   'hook/echo/output_success': '> No Errors Found.',
        \   'hook/back_window/enable' : 1,
        \   'hook/back_window/enable_exit' : 1,
        \   'hock/close_buffer/enable_hock_loaded' : 1,
        \   'hock/close_buffer/enable_success' : 1,
        \   'hook/qfstatusline_update/enable_exit' : 1,
        \   'hook/qfstatusline_update/priority_exit' : 4,
        \ }

if executable('eslint')
  let g:quickrun_config['javascript/watchdogs_checker'] = {
        \   'type' : 'watchdogs_checker/eslint',
        \ }
endif
let g:watchdogs_check_BufWritePost_enables = {
      \ 'javascript'     : 1,
      \ }
'''
on_event = ['FocusLost', 'CursorHold']
hook_post_source  = '''
	call watchdogs#setup(g:quickrun_config)
'''

# whiteSpace
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'derekwyatt/vim-scala'

[[plugins]]
repo = 'tpope/vim-pathogen'

[[plugins]]
repo = 'digitaltoad/vim-pug'
depends = ['tpope/vim-pathogen']
hook_add = '''
au BufRead,BufNewFile,BufReadPre *.jade set filetype=pug
'''

[[plugins]]
repo = 'posva/vim-vue'

#git
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'cohama/agit.vim'

[[plugins]]
repo = 'kmnk/vim-unite-giti.git'
depends = ['Shougo/unite.vim']

[[plugins]]
repo = 'airblade/vim-rooter'


# 補完
[[plugins]]
repo = 'Shougo/neocomplcache'
hook_add = '''
" neocomplcache setteing
"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" neocompleteのせっていこっちが正しい？
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
" Goの設定
let g:neocomplcache_omni_patterns.go = '\h\w*\.\?'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplcache#smart_close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplcache_force_omni_patterns')
  let g:neocomplcache_force_omni_patterns = {}
endif
let g:neocomplcache_force_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_force_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplcache_force_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplcache_force_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

'''

[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'mattn/startmenu-vim'

# インデント
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add ='''
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_guide_size=1
'''

# selecting 
[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add ='''
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
'''

# brawser
[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
let g:netrw_nogx=1
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'miyakogi/seiya.vim'
hook_add = '''
let g:seiya_auto_enable=1
'''

# color scheme
[[plugins]]
repo = 'tomasr/molokai'
hook_post_source = '''
" Colorscheme イベントの発生が抑制されないよう nented を付ける。
set background=dark
autocmd! VimEnter * nested colorscheme molokai
'''

# elm
[[plugins]]
repo = 'elmcast/elm-vim'

# other
[[plugins]]
repo = 'thinca/vim-splash'
depends = ['miyakogi/seiya.vim']
hook_post_source = '''
autocmd! VimEnter * SeiyaEnable
'''

[[plugins]]
repo = 'amanoese/splash-julia'
depends = ['thinca/vim-splash']
