[[plugins]]
repo = 'Shougo/unite.vim'

#shell
[[plugins]]
repo = 'Shougo/vimshell'

[[plugins]]
repo = 'Shougo/vimproc.vim'

# quickrun
[[plugins]]
repo = 'thinca/vim-quickrun'

# ステータスライン
[[plugins]]
repo = 'itchyny/lightline.vim'

# インデント
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add ='''
let g:indent_guides_guide_size=1
'''
hook_post_source  = '''
" 読み込んだプラグインも含め、ファイルタイプの検出、ファイルタイプ別プラグイン/インデントを有効化する
filetype plugin indent on
'''

# whiteSpace
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'


# syntacs
[[plugins]]
repo = 'scrooloose/syntastic'

[[plugins]]
repo = 'jelera/vim-javascript-syntax'

[[plugins]]
repo = 'derekwyatt/vim-scala'


#git
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'cohama/agit.vim'

[[plugins]]
repo = 'kmnk/vim-unite-giti.git'

[[plugins]]
repo = 'airblade/vim-rooter'


# 補完
[[plugins]]
repo = 'Shougo/neocomplcache'
hook_post_source  = '''
" neocomplcache setteing
"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplcache#smart_close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplcache#close_popup() : "\<Space>"

" For cursor moving in insert mode(Not recommended)
"inoremap <expr><Left>  neocomplcache#close_popup() . "\<Left>"
"inoremap <expr><Right> neocomplcache#close_popup() . "\<Right>"
"inoremap <expr><Up>    neocomplcache#close_popup() . "\<Up>"
"inoremap <expr><Down>  neocomplcache#close_popup() . "\<Down>"
" Or set this.
"let g:neocomplcache_enable_cursor_hold_i = 1
" Or set this.
"let g:neocomplcache_enable_insert_char_pre = 1

" AutoComplPop like behavior.
"let g:neocomplcache_enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplcache_enable_auto_select = 1
"let g:neocomplcache_disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplcache_force_omni_patterns')
  let g:neocomplcache_force_omni_patterns = {}
endif
let g:neocomplcache_force_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_force_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplcache_force_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplcache_force_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

"excel.vim setting code
"let g:zipPlugin_ext = '*.zip,*.jar,*.xpi,*.ja,*.war,*.ear,*.celzip,*.oxt,*.kmz,*.wsz,*.xap,*.docx,*.docm,*.dotx,*.dotm,*.potx,*.potm,*.ppsx,*.ppsm,*.pptx,*.pptm,*.ppam,*.sldx,*.thmx,*.crtx,*.vdw,*.glox,*.gcsx,*.gqsx'

"let let g:syntastic_mode_map = {"mode":"active","active_filetypes":["javascript", "json"]}

'''

[[plugins]]
repo = 'mattn/emmet-vim'

# excelファイル開くために導入
[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'mattn/excelview-vim'

[[plugins]]
repo = 'mattn/startmenu-vim'
hook_add =''' 
" eslint setting for synatic
let g:syntastic_check_on_open=0 "ファイルを開いたときはチェックしない
let g:syntastic_check_on_save=1 "保存時にはチェック
let g:syntastic_check_on_wq = 0 " wqではチェックしない
let g:syntastic_auto_loc_list=1 "エラーがあったら自動でロケーションリストを開く
let g:syntastic_loc_list_height=6 "エラー表示ウィンドウの高さ
set statusline+=%#warningmsg# "エラーメッセージの書式
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_javascript_checkers = ['eslint'] "ESLintを使う
let g:syntastic_mode_map = {
      \ 'mode': 'active',
      \ 'active_filetypes': ['javascript'],
      \ 'passive_filetypes': []
      \ }
'''

#[[plugins]]
#repo = 'vim-scripts/taglist.vim'
#
#[[plugins]]
#repo = 'majutsushi/tagbar'
#hook_add =''' 
#nmap <kPlus> <C-a>
#nmap <kMinus> <C-x>
#'''
#hook_post_source  = '''
#nmap <F8> :TagbarToggle<CR>
#'''

# markdown
[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add =''' 
augroup PrevimSettings
    autocmd!
    autocmd BufNewFile,BufRead *.{MD,md,mdwn,mkd,mkdn,mark*} set filetype=markdown
augroup END

'''

[[plugins]]
repo = 'kannokanno/previm'

# brawser
[[plugins]]
repo = 'tyru/open-browser.vim'
hook_post_source  = '''
let g:netrw_nogx = 1 # disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)

'''


# color scheme
[[plugins]]
repo = 'tomasr/molokai'
hook_add = '''
" Colorscheme イベントの発生が抑制されないよう nented を付ける。
set background=dark
au MyAutoCmd VimEnter * nested colorscheme molokai

'''
